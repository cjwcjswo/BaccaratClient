// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocol {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvEghwcm90b2NvbCIlCg5CZXR0aW5nUmVxdWVzdBITCgti",
            "ZXR0aW5nVHlwZRgBIAEoDSIRCg9CZXR0aW5nUmVzcG9uc2UiQAoQQmV0dGlu",
            "Z0Jyb2FkY2FzdBIXCg9zZXNzaW9uVW5pcXVlSWQYASABKAQSEwoLYmV0dGlu",
            "Z1R5cGUYAiABKA0iYAoWQmFjY2FyYXRSb3VuZEJyb2FkY2FzdBINCgVyb3Vu",
            "ZBgBIAEoDRIUCgxiYWNjYXJhdFR5cGUYAiABKA0SEAoIY2FyZFR5cGUYAyAB",
            "KA0SDwoHY2FyZE51bRgEIAEoDSI/ChdCYWNjYXJhdFJlc3VsdEJyb2FkY2Fz",
            "dBIRCglwbGF5ZXJTdW0YASABKA0SEQoJYmFua2VyU3VtGAIgASgNYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BettingRequest), global::Protocol.BettingRequest.Parser, new[]{ "BettingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BettingResponse), global::Protocol.BettingResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BettingBroadcast), global::Protocol.BettingBroadcast.Parser, new[]{ "SessionUniqueId", "BettingType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BaccaratRoundBroadcast), global::Protocol.BaccaratRoundBroadcast.Parser, new[]{ "Round", "BaccaratType", "CardType", "CardNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocol.BaccaratResultBroadcast), global::Protocol.BaccaratResultBroadcast.Parser, new[]{ "PlayerSum", "BankerSum" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BettingRequest : pb::IMessage<BettingRequest> {
    private static readonly pb::MessageParser<BettingRequest> _parser = new pb::MessageParser<BettingRequest>(() => new BettingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BettingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingRequest(BettingRequest other) : this() {
      bettingType_ = other.bettingType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingRequest Clone() {
      return new BettingRequest(this);
    }

    /// <summary>Field number for the "bettingType" field.</summary>
    public const int BettingTypeFieldNumber = 1;
    private uint bettingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BettingType {
      get { return bettingType_; }
      set {
        bettingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BettingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BettingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BettingType != other.BettingType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BettingType != 0) hash ^= BettingType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BettingType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BettingType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BettingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BettingType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BettingRequest other) {
      if (other == null) {
        return;
      }
      if (other.BettingType != 0) {
        BettingType = other.BettingType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BettingType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BettingResponse : pb::IMessage<BettingResponse> {
    private static readonly pb::MessageParser<BettingResponse> _parser = new pb::MessageParser<BettingResponse>(() => new BettingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BettingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingResponse(BettingResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingResponse Clone() {
      return new BettingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BettingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BettingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BettingResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BettingBroadcast : pb::IMessage<BettingBroadcast> {
    private static readonly pb::MessageParser<BettingBroadcast> _parser = new pb::MessageParser<BettingBroadcast>(() => new BettingBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BettingBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingBroadcast(BettingBroadcast other) : this() {
      sessionUniqueId_ = other.sessionUniqueId_;
      bettingType_ = other.bettingType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BettingBroadcast Clone() {
      return new BettingBroadcast(this);
    }

    /// <summary>Field number for the "sessionUniqueId" field.</summary>
    public const int SessionUniqueIdFieldNumber = 1;
    private ulong sessionUniqueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SessionUniqueId {
      get { return sessionUniqueId_; }
      set {
        sessionUniqueId_ = value;
      }
    }

    /// <summary>Field number for the "bettingType" field.</summary>
    public const int BettingTypeFieldNumber = 2;
    private uint bettingType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BettingType {
      get { return bettingType_; }
      set {
        bettingType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BettingBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BettingBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionUniqueId != other.SessionUniqueId) return false;
      if (BettingType != other.BettingType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionUniqueId != 0UL) hash ^= SessionUniqueId.GetHashCode();
      if (BettingType != 0) hash ^= BettingType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionUniqueId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SessionUniqueId);
      }
      if (BettingType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BettingType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionUniqueId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SessionUniqueId);
      }
      if (BettingType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BettingType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BettingBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.SessionUniqueId != 0UL) {
        SessionUniqueId = other.SessionUniqueId;
      }
      if (other.BettingType != 0) {
        BettingType = other.BettingType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SessionUniqueId = input.ReadUInt64();
            break;
          }
          case 16: {
            BettingType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaccaratRoundBroadcast : pb::IMessage<BaccaratRoundBroadcast> {
    private static readonly pb::MessageParser<BaccaratRoundBroadcast> _parser = new pb::MessageParser<BaccaratRoundBroadcast>(() => new BaccaratRoundBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaccaratRoundBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratRoundBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratRoundBroadcast(BaccaratRoundBroadcast other) : this() {
      round_ = other.round_;
      baccaratType_ = other.baccaratType_;
      cardType_ = other.cardType_;
      cardNum_ = other.cardNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratRoundBroadcast Clone() {
      return new BaccaratRoundBroadcast(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private uint round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "baccaratType" field.</summary>
    public const int BaccaratTypeFieldNumber = 2;
    private uint baccaratType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaccaratType {
      get { return baccaratType_; }
      set {
        baccaratType_ = value;
      }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private uint cardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardNum" field.</summary>
    public const int CardNumFieldNumber = 4;
    private uint cardNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardNum {
      get { return cardNum_; }
      set {
        cardNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaccaratRoundBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaccaratRoundBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      if (BaccaratType != other.BaccaratType) return false;
      if (CardType != other.CardType) return false;
      if (CardNum != other.CardNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0) hash ^= Round.GetHashCode();
      if (BaccaratType != 0) hash ^= BaccaratType.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardNum != 0) hash ^= CardNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Round);
      }
      if (BaccaratType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BaccaratType);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CardType);
      }
      if (CardNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CardNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
      }
      if (BaccaratType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaccaratType);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardType);
      }
      if (CardNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaccaratRoundBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.BaccaratType != 0) {
        BaccaratType = other.BaccaratType;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardNum != 0) {
        CardNum = other.CardNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadUInt32();
            break;
          }
          case 16: {
            BaccaratType = input.ReadUInt32();
            break;
          }
          case 24: {
            CardType = input.ReadUInt32();
            break;
          }
          case 32: {
            CardNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BaccaratResultBroadcast : pb::IMessage<BaccaratResultBroadcast> {
    private static readonly pb::MessageParser<BaccaratResultBroadcast> _parser = new pb::MessageParser<BaccaratResultBroadcast>(() => new BaccaratResultBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaccaratResultBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocol.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratResultBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratResultBroadcast(BaccaratResultBroadcast other) : this() {
      playerSum_ = other.playerSum_;
      bankerSum_ = other.bankerSum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaccaratResultBroadcast Clone() {
      return new BaccaratResultBroadcast(this);
    }

    /// <summary>Field number for the "playerSum" field.</summary>
    public const int PlayerSumFieldNumber = 1;
    private uint playerSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerSum {
      get { return playerSum_; }
      set {
        playerSum_ = value;
      }
    }

    /// <summary>Field number for the "bankerSum" field.</summary>
    public const int BankerSumFieldNumber = 2;
    private uint bankerSum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BankerSum {
      get { return bankerSum_; }
      set {
        bankerSum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaccaratResultBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaccaratResultBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerSum != other.PlayerSum) return false;
      if (BankerSum != other.BankerSum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerSum != 0) hash ^= PlayerSum.GetHashCode();
      if (BankerSum != 0) hash ^= BankerSum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerSum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PlayerSum);
      }
      if (BankerSum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BankerSum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerSum);
      }
      if (BankerSum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BankerSum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaccaratResultBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.PlayerSum != 0) {
        PlayerSum = other.PlayerSum;
      }
      if (other.BankerSum != 0) {
        BankerSum = other.BankerSum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerSum = input.ReadUInt32();
            break;
          }
          case 16: {
            BankerSum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
